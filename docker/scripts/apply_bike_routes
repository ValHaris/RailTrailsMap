#!/usr/bin/python3
import psycopg2
from itertools import islice
from tqdm import tqdm
import argparse

# Database connection parameters
db_params = {
    'dbname': 'gis',
    'user': 'renderer',
    'password': 'renderer',
    'host': 'localhost',
    'port': '5432'
}

def batched(iterable, n):
    if n < 1:
        raise ValueError('n must be at least one')
    iterator = iter(iterable)
    while batch := tuple(islice(iterator, n)):
        yield batch

def get_connection(db_params):
    """Establish a connection to the PostgreSQL database."""
    return psycopg2.connect(**db_params)

def query(conn, query):
    with conn.cursor() as cursor:
        cursor.execute(query)
        results = cursor.fetchall()
        for row in results:
            yield row

def list_to_dict(lst):
    if len(lst) % 2 != 0:
        return {}
    return dict(zip(lst[0::2], lst[1::2]))

GET_BIKE_ROUTES = "select parts, tags, id from planet_osm_rels where 'bicycle' = ANY(tags);"
GET_RAILTRAIL_ROUTES = "select tags from planet_osm_rels where 'railtrail' = ANY(tags);"

def set_ways(conn, batch, update_statement):
    query = f"update planet_osm_line set {update_statement} where osm_id = ANY(%s);"
    with conn.cursor() as cursor:
        cursor.execute(query, (batch,))
        conn.commit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Apply bike routes to the database.')
    parser.add_argument('--dryrun', action='store_true', help='Run the script in dry run mode without making any changes to the database.')
    args = parser.parse_args()

    with get_connection(db_params) as conn:
        # With the current database schema, tags are just an array of strings, making it difficult to query key-value combinations.
        # Hence this script just searches for keywords in the tags and then checks key-values on python side.

        if any(filter(lambda x: list_to_dict(x[0]).get("route") != "bicycle", query(conn, GET_RAILTRAIL_ROUTES))):
            print("*** Found railtrails that are not bicycle routes! ***")

        all_bike_routes = set()
        bike_trail_routes = set()
        for row in query(conn, GET_BIKE_ROUTES):
            tags = list_to_dict(row[1])
            if tags.get("route") == "bicycle":
                all_bike_routes.update(row[0])
                if tags.get("railtrail") == "yes":
                    bike_trail_routes.update(row[0])
        
        if not args.dryrun:
            print(f"Updating {len(all_bike_routes)} ways for bike routes")
            for b in tqdm(batched(all_bike_routes, n=1000), total=len(all_bike_routes)//1000):
                set_ways(conn, list(b), "route = 'bicycle'")

            print(f"Updating {len(bike_trail_routes)} railtrails")
            for b in tqdm(batched(bike_trail_routes, n=100), total=len(bike_trail_routes)//100):
                set_ways(conn, list(b), "route = 'railtrailrel'")

